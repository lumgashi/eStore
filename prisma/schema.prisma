// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["fullTextIndex", "omitApi"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  email       String    @unique
  firstName   String
  lastName    String
  phoneNumber String?   @default("000-000-0000")
  password    String
  role        String
  isActive    Boolean   @default(true)
  Post        Post[]
  store       Store?
  Address     Address[]
  Cart        Cart?
  Order       Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Address {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  street           String
  city             String
  country          String
  zip              String
  user             User     @relation(fields: [userId], references: [id])
  userId           String   @db.ObjectId
  isDefaultAddress Boolean?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("addresses")
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  author    User     @relation(fields: [authorid], references: [id])
  authorid  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model Store {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String @unique
  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String @unique @db.ObjectId

  storeCategories StoreCategory[]

  bio       String    @default("No bio yet.")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@map("stores")
}

model StoreCategory {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  storeId String @db.ObjectId
  store   Store  @relation(fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([storeId, name])
  @@map("storeCategories")
}

model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  storeId       String   @db.ObjectId
  store         Store    @relation(fields: [storeId], references: [id])
  stock         Int
  productImages String[]
  price         Float
  shippingFee   Float
  cartItems     CartItem[]
  orderItems    OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([storeId, name])
  @@map("products")
}

model Cart {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  cartItems  CartItem[]

  totalPrice  Float    @default(0.0)
  shippingFee Float    @default(0.0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("carts")
}

model CartItem {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  cartId      String @db.ObjectId
  cart        Cart   @relation(fields: [cartId], references: [id])
  productId   String @db.ObjectId @unique
  product     Product @relation(fields: [productId], references: [id])
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("cartItems")
}

model Order {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  orderItems  OrderItem[]

  // status       String   @default("Pending")
  // quantity     Int
  confirmOrder Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("orders")
}

model OrderItem {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String @db.ObjectId
  order       Order  @relation(fields: [orderId], references: [id])
  productId   String @db.ObjectId
  product     Product @relation(fields: [productId], references: [id])
  quantity    Int
  storeId     String @db.ObjectId @unique
  orderID     BigInt @unique
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("orderItems")
}